image: node:14.17

stages:
  - build
  - docker
  - deploy

# global cache settings for all jobs
# Ensure compatibility with the install job
# goal: the install job loads the cache and
# all other jobs can only use it
cache:
  # most npm libraries will only have 1 entry for the base project deps
  - key:
        files:
            - package-lock.json
    paths:
        - node_modules/

  # must be inside $CI_PROJECT_DIR for gitlab-runner caching (#3)
  - key:
      files:
        - package-lock.json
    paths:
      - node_modules/
    policy: pull  # prevent subsequent jobs from modifying cache

build:
  stage: build
  allow_failure: true
  cache:
    # store npm cache for all branches (stores download pkg.tar.gz's)
    # will not be necessary for any other job
    - key: ${CI_JOB_NAME}
      # must be inside $CI_PROJECT_DIR for gitlab-runner caching (#3)
      paths:
        - .npm/
      when: on_success
      policy: pull-push

    # Mimic &global_cache_node_mods config but override policy
    # to allow this job to update the cache at the end of the job
    # and only update if it was a successful job
    # NOTE: I would use yaml anchors here but overriding the policy
    # in a yaml list is not as easy as a dictionary entry (#5)
    - key:
        files:
          - package-lock.json
      paths:
        - node_modules/
      when: on_success
      policy: pull-push 

  # only:
  #   refs:
  #     - main
  #     - merge_requests
  # # global cache settings are inherited to grab `node_modules`
  script:
    - npm ci --cache .npm --prefer-offline
    - npm run build
  artifacts:
    paths:
      - build/  # where ever your build results are stored

docker:
  stage: docker
  needs:
    - build
  image:
    name: gcr.io/kaniko-project/executor:v1.15.0-debug
    entrypoint: [ "" ]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}:$CI_PIPELINE_IID"
      --destination "${CI_REGISTRY_IMAGE}:latest"
      --cleanup
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - build/**
      - .gradle

deploy:
  stage: deploy
  image: $BASE_AWS_EKS_IMAGE
  only:
    refs:  # We only want to deploy after we build the image
      - main
  before_script:
    - export IMAGE="$CI_REGISTRY_IMAGE":"$CI_PIPELINE_IID"
    - aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
    - aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
    - aws configure set region us-west-2
    - aws configure set output json
    - aws eks update-kubeconfig --name "$CLUSTER_NAME"
    - aws sts get-caller-identity

  script:
    - envsubst < k8s/identity-gui-deploy.yaml | kubectl apply -f -
    - kubectl apply -f k8s/identity-gui-service.yaml
